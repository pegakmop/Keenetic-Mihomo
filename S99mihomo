#!/bin/sh

# Обновлённый init-скрипт для Mihomo с автоматическим поиском модулей ядра и проверкой сети

# === Конфигурация ===
ENABLED=yes
PROCS="mihomo"
MIHOMO_BIN="/opt/sbin/mihomo"
MIHOMO_DIR="/opt/etc/mihomo"
ARGS="-d ${MIHOMO_DIR}"
PID_FILE="/opt/var/run/mihomo.pid"
LOG_FILE="/opt/var/log/mihomo.log"

POLICY_NAME="mihomo"
TABLE_MARK="0x111"
TABLE_ID="111"
ROUTER_API_URL="http://localhost:79/rci/show/ip/policy"
TPROXY_PORT="4000"

# Настройки ожидания сети
MAX_RETRIES=5
RETRY_DELAY=10
NETWORK_TEST_URL="http://connectivitycheck.gstatic.com/generate_204"

# === Загрузка Entware функций ===
if [ -f /opt/etc/init.d/rc.func ]; then
    . /opt/etc/init.d/rc.func
else
    echo "Error: /opt/etc/init.d/rc.func not found." >&2
    exit 1
fi

log() {
    echo "$(date '+%Y-%m-%d %H:%M:%S') - $1" >> "$LOG_FILE"
    logger "$(date '+%Y-%m-%d %H:%M:%S') - $1"
}

wait_for_network() {
    local retries=0
    log "Ожидание доступности сети..."
    
    while [ $retries -lt $MAX_RETRIES ]; do
        if curl -s -I --connect-timeout 5 "$NETWORK_TEST_URL" >/dev/null 2>&1; then
            log "Сеть доступна"
            return 0
        fi
        
        retries=$((retries+1))
        log "Попытка $retries из $MAX_RETRIES - сеть не доступна, ждем $RETRY_DELAY сек..."
        sleep $RETRY_DELAY
    done
    
    log "Не удалось установить соединение с интернетом после $MAX_RETRIES попыток"
    return 1
}

find_kernel_module() {
    local mod=$1
    local found_path
    
    for path in "/lib/modules/$(uname -r)" "/opt/lib/modules" "/lib/modules"; do
        found_path=$(find "$path" -name "$mod" 2>/dev/null | head -n 1)
        if [ -n "$found_path" ]; then
            echo "$found_path"
            return 0
        fi
    done
    
    log "Модуль $mod не найден в системе"
    return 1
}

load_kernel_module() {
    local mod=$1
    local mod_name=${mod%%.ko}
    local mod_path
    
    if lsmod | grep -q "^${mod_name}"; then
        log "Модуль $mod_name уже загружен"
        return 0
    fi
    
    if ! mod_path=$(find_kernel_module "$mod"); then
        return 1
    fi
    
    if ! insmod "$mod_path"; then
        log "Ошибка загрузки модуля $mod_path"
        return 1
    fi
    
    if ! lsmod | grep -q "^${mod_name}"; then
        log "Модуль $mod_name не загрузился"
        return 1
    fi
    
    log "Модуль $mod_name успешно загружен из $mod_path"
    return 0
}

check_dependencies() {
    for cmd in iptables curl jq ip; do
        if ! command -v "$cmd" >/dev/null 2>&1; then
            log "Ошибка: команда $cmd не найдена"
            return 1
        fi
    done

    for mod in xt_TPROXY.ko xt_socket.ko; do
        if ! load_kernel_module "$mod"; then
            log "Ошибка: модуль ядра $mod не найден или не загружен"
            return 1
        fi
    done
    
    return 0
}

get_policy_mark() {
    local mark
    local retries=3
    local attempt=0
    
    while [ $attempt -lt $retries ]; do
        if mark=$(curl -kfsS "$ROUTER_API_URL" | jq -r ".[] | select(.description | ascii_downcase == \"$POLICY_NAME\") | .mark"); then
            if [ -n "$mark" ]; then
                echo "0x$mark"
                return 0
            fi
        fi
        
        attempt=$((attempt+1))
        log "Попытка $attempt из $retries получить метку политики не удалась, ждем 5 сек..."
        sleep 5
    done
    
    log "Ошибка при получении метки политики маршрутизации"
    return 1
}

check_keenetic_port() {
    local port
    if ! port=$(curl -kfsS "http://localhost:79/rci/ip/http/ssl" | jq -r '.port'); then
        log "Ошибка при проверке порта Keenetic"
        return 1
    fi
    
    if [ "$port" = "443" ]; then
        log "Порт 443 занят Keenetic. Измените его на 8443."
        return 1
    fi
    return 0
}

configure_tproxy() {
    local policy_mark
    
    if ! check_dependencies; then
        log "Ошибка проверки зависимостей"
        return 1
    fi

    if ! policy_mark=$(get_policy_mark); then
        log "Ошибка получения метки политики маршрутизации"
        return 1
    fi

    if ! iptables -t mangle -L MIHOMO_TPROXY >/dev/null 2>&1; then
        iptables -t mangle -N MIHOMO_TPROXY || {
            log "Ошибка создания цепочки MIHOMO_TPROXY"
            return 1
        }
    fi

    iptables -t mangle -F MIHOMO_TPROXY

    iptables -t mangle -A MIHOMO_TPROXY -p tcp -j TPROXY --on-port $TPROXY_PORT --tproxy-mark $TABLE_MARK
    iptables -t mangle -A MIHOMO_TPROXY -p udp -j TPROXY --on-port $TPROXY_PORT --tproxy-mark $TABLE_MARK

    iptables -t mangle -A MIHOMO_TPROXY -j MARK --set-mark $TABLE_MARK
    iptables -t mangle -A MIHOMO_TPROXY -j CONNMARK --save-mark

    if ! iptables -t mangle -C PREROUTING -m mark --mark $policy_mark -j MIHOMO_TPROXY >/dev/null 2>&1; then
        iptables -t mangle -A PREROUTING -m mark --mark $policy_mark -j MIHOMO_TPROXY || {
            log "Ошибка добавления правила PREROUTING"
            return 1
        }
    fi

    if ! ip rule list | grep -q "fwmark $TABLE_MARK lookup $TABLE_ID"; then
        ip rule add fwmark $TABLE_MARK lookup $TABLE_ID || {
            log "Ошибка добавления правила маршрутизации"
            return 1
        }
    fi

    if ! ip route show table $TABLE_ID | grep -q "local default dev lo"; then
        ip route add local default dev lo table $TABLE_ID || {
            log "Ошибка добавления маршрута"
            return 1
        }
    fi

    log "Настроены правила TPROXY на порт $TPROXY_PORT с меткой $TABLE_MARK (политика маршрутизации: $policy_mark)"
    return 0
}

start_mihomo() {
    mkdir -p "$(dirname "$PID_FILE")" "$(dirname "$LOG_FILE")" "$MIHOMO_DIR"
    [ -f "$PID_FILE" ] && kill -0 "$(cat "$PID_FILE")" 2>/dev/null && {
        log "$PROCS уже запущен с PID $(cat "$PID_FILE")"
        return 0
    }

    log "Запуск $PROCS..."
    
    # Ждем доступности сети
    if ! wait_for_network; then
        log "Продолжаем без интернет-соединения..."
    fi

    if ! check_keenetic_port; then
        return 1
    fi

    if ! configure_tproxy; then
        log "Ошибка настройки TPROXY"
        return 1
    fi

    nohup $MIHOMO_BIN $ARGS >> "$LOG_FILE" 2>&1 &
    echo $! > "$PID_FILE"
    log "$PROCS запущен, PID: $(cat "$PID_FILE")"
    return 0
}

stop_mihomo() {
    if [ -f "$PID_FILE" ]; then
        local pid=$(cat "$PID_FILE")
        if kill -0 "$pid" 2>/dev/null; then
            kill -9 "$pid" && rm -f "$PID_FILE"
            log "$PROCS остановлен (PID: $pid)"
            return 0
        fi
        rm -f "$PID_FILE"
    fi
    log "$PROCS не запущен"
    return 0
}

case "$1" in
    start)
        # Добавляем задержку для запуска после загрузки сети
        sleep 15
        start_mihomo
        ;;
    stop)
        stop_mihomo
        ;;
    restart)
        stop_mihomo
        sleep 5
        start_mihomo
        ;;
    *)
        echo "Usage: $0 {start|stop|restart}"
        exit 1
        ;;
esac

exit $?
